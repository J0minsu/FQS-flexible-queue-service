plugins {
	id 'application'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	implementation project(':service:gateway:gateway_domain')

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// JWT
	implementation 'io.jsonwebtoken:jjwt:0.12.6'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jib {
	from {
		image = "amazoncorretto:17"
		platforms {
			platform {
				architecture = 'amd64'
				os = 'linux'
			}
		}
	}
	to {
		image = "kwforu/" + "${project.name}".toLowerCase() + ":${project.version}"
		tags = ['latest']
	}
	container {
		ports = ['19091']
		jvmFlags = [
				"-server",
				"-Xmx512M",
				"-Dspring.profiles.active=dev",
				"-XX:+UseContainerSupport",
				"-XX:InitialRAMPercentage=60.0",
				"-XX:MaxRAMPercentage=60.0",
				"-XX:+UseZGC",
				"-XX:+DisableExplicitGC",
				"-XX:MetaspaceSize=256M",
				"-XX:MaxMetaspaceSize=256M",
				"-Duser.timezone=UTC",
				"-Djava.net.preferIPv4Stack=true",
				"-Djava.net.preferIPv6Addresses=false",
				"-Dnetworkaddress.cache.ttl=0",
				"-Dnetworkaddress.cache.negative.ttl=0",
		]
		environment = [
				JWT_SECRET_KEY: System.getenv("JWT_SECRET_KEY"),
		]
	}
}